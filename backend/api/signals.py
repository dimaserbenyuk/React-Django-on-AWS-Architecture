import logging
import os

from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils.timezone import now
from django.conf import settings

from .models import Invoice, InvoiceItem, TaskStatus
from .tasks import generate_pdf

logger = logging.getLogger(__name__)


@receiver(post_save, sender=InvoiceItem)
def generate_pdf_when_item_added(sender, instance, created, **kwargs):
    invoice = instance.invoice
    if not invoice:
        logger.warning("[signals] üßæ InvoiceItem —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω —Å Invoice.")
        return

    if not invoice.items.exists():
        logger.info(f"[signals] ‚è≥ Invoice #{invoice.id} –µ—â—ë –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º: –Ω–µ—Ç –ª–∏ —É–∂–µ PDF-—Ñ–∞–π–ª–∞
    pdf_path = invoice.get_pdf_path()
    pdf_exists = False

    if getattr(settings, "USE_S3", False):
        pdf_exists = bool(invoice.pdf_url)
    else:
        pdf_exists = os.path.exists(pdf_path)

    if pdf_exists:
        logger.info(f"[signals] ‚úÖ Invoice #{invoice.id}: PDF —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    latest_task = invoice.tasks.first()
    if latest_task and latest_task.status in [
        TaskStatus.Status.QUEUED,
        TaskStatus.Status.RUNNING,
        TaskStatus.Status.COMPLETED
    ]:
        logger.info(f"[signals] ‚è© Invoice #{invoice.id}: —É–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {latest_task.status}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    try:
        logger.info(f"[signals] üßæ Invoice #{invoice.id}: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF...")

        result = generate_pdf.delay(invoice.id)

        TaskStatus.objects.update_or_create(
            invoice=invoice,
            defaults={
                "task_id": result.id if result else None,
                "status": TaskStatus.Status.QUEUED,
                "started_at": now(),
                "heartbeat_at": now(),
            }
        )
    except Exception as e:
        logger.exception(f"[signals] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–ª—è Invoice #{invoice.id}")
