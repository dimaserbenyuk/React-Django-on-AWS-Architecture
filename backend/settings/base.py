"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import environ
from pathlib import Path
from storages.backends.s3boto3 import S3Boto3Storage

env = environ.Env()

# ‚ùå –û—à–∏–±–æ—á–Ω–æ: –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç dev, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
# ENV = os.getenv('DJANGO_ENV', 'dev')

# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: —á–∏—Ç–∞–µ–º DJANGO_ENV –∏–∑ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
DJANGO_ENV = env('DJANGO_ENV', default='dev')

ENV_FILE = Path(__file__).resolve().parent.parent / f".env.{DJANGO_ENV}"
if not os.getenv("ENV_LOADED"):
    print(f"üìÑ Using environment file: {ENV_FILE}")
    os.environ["ENV_LOADED"] = "1"
    

environ.Env.read_env(ENV_FILE)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

USE_S3 = os.getenv('USE_S3', 'FALSE').upper() == 'TRUE'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["http://localhost:3000","http://localhost:5173/"]

import logging.config
from django.utils.log import DEFAULT_LOGGING

# –û—Ç–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Django
LOGGING_CONFIG = None

LOGLEVEL = os.getenv('LOGLEVEL', 'INFO').upper()

logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },
        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
    },
    'loggers': {
        # –ë–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
        '': {
            'level': 'WARNING',
            'handlers': ['console'],
        },
        # –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        'app': {
            'level': LOGLEVEL,
            'handlers': ['console'],
            'propagate': False,
        },
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ Django
        'django.server': DEFAULT_LOGGING['loggers']['django.server'],
    },
})


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'backend.api',
    'rest_framework',
    'django_celery_beat',
    'corsheaders',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000","http://localhost:5173"
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

PDF_OUTPUT_DIR = BASE_DIR / "pdf_output"
# STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CELERY_BEAT_SCHEDULE = {
    "check-stuck-tasks-every-15-mins": {
        "task": "check_stuck_tasks",
        "schedule": 900.0,  # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    },
}

USE_S3 = os.getenv('USE_S3', 'FALSE').upper() == 'TRUE'

if USE_S3:
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

    AWS_DEFAULT_ACL = None
    AWS_S3_FILE_OVERWRITE = False
    AWS_QUERYSTRING_AUTH = False
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=2592000",
    }

    # ‚¨áÔ∏è –í–ê–ñ–ù–û: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ storage_backends
    STATICFILES_LOCATION = "static"
    MEDIAFILES_LOCATION = "media"
    LOGOFILES_LOCATION = "invoices/logos"
    PDFFILES_LOCATION = "invoices/pdfs"

    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/"
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/"

    STORAGES = {
        "default": {
            "BACKEND": "backend.storage_backends.MediaStorage"
        },
        "staticfiles": {
            "BACKEND": "backend.storage_backends.StaticStorage"
        },
    }

else:
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# PDF –ª–æ–∫–∞–ª—å–Ω–æ –≤ dev
PDF_OUTPUT_DIR = BASE_DIR / "pdf_output"


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')